" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker nospell:
" Automatic reloading of .vimrc
autocmd! bufwritepost .vimrc source %

" spf13
colorscheme materialbox
"colorscheme molokai_dark

" disable spellcheck
set nospell

" enable/disable pastemode in insert mode
set pastetoggle=<F2>

" disable folding
set nofoldenable

" enable/disable linenumbers in normal mode
map <silent> <F2> :set invnumber<cr>

" F7 in command mode removes trailing whitespace
:nnoremap <silent> <F7> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

" makes middle-click pasting x selection work
set mouse-=a

" Tagbar
nmap <F8> :TagbarToggle<CR>

" neovim pipenv integration
let g:python_host_prog=expand('~/.pyenv/versions/neovim2/bin/python')
let g:python3_host_prog=expand('~/.pyenv/versions/neovim3/bin/python')


" underline cursorline
highlight CursorLine gui=underline cterm=underline


" deoplete
" https://github.com/Shougo/deoplete.nvim/issues/432
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" http://vim.wikia.com/wiki/Make_Vim_completion_popup_menu_work_just_like_in_an_IDE
" variation on the CR line from previous link: added <C-e> to it
"inoremap <expr> <CR>       pumvisible() ? "\<C-y>\<C-e>" : "\<CR>"
" default as per previous link
inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"
inoremap <expr> <PageDown> pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<PageDown>"
inoremap <expr> <PageUp>   pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<PageUp>"

" <CR>: close popup and save indent.
" https://github.com/Shougo/deoplete.nvim/issues/83
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return deoplete#mappings#smart_close_popup() . "\<CR>"
endfunction

" toggle wrapping
:function ToggleWrap()
: if (&wrap == 1)
:   set nowrap
: else
:   set wrap
: endif
:endfunction
map <F9> :call ToggleWrap()<CR>
map! <F9> ^[:call ToggleWrap()<CR>

let NERDTreeQuitOnOpen=0
nmap <silent> <C-D> :NERDTreeToggle<CR>

" You can't just ":unmap <F1>" because Vim would complain that no such mapping exists.
" You could still access the help system via :help command or the gvim menu.
:nmap <F1> :echo<CR>
:imap <F1> <C-o>:echo<CR>


" syntastic
let g:syntastic_check_on_open = 1


" http://vim.wikia.com/wiki/Identify_the_syntax_highlighting_group_used_at_the_cursor
map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>


" disable this plugin - it does something funky with bash if then else
" https://github.com/luochen1990/rainbow/issues/95
let g:rainbow_active = 0

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
" My old .vimrc
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"" .vimrc file serge@vanginderachter.be
"" Inspired by Martin Brochhaus
"
"
"scriptencoding utf-8
"set encoding=utf-8
"
"" Automatic reloading of .vimrc
"autocmd! bufwritepost .vimrc source %
"
"
"set noerrorbells                " No beeps
"set number                      " Show line numbers
"set backspace=indent,eol,start  " Makes backspace key more powerful.
"set showcmd                     " Show me what I'm typing
"set showmode                    " Show current mode.
"
"set noswapfile                  " Don't use swapfile
"set nobackup                    " Don't create annoying backup files
"set nowritebackup
"set splitright                  " Split vertical windows right to the current windows
"set splitbelow                  " Split horizontal windows below to the current windows
"set encoding=utf-8              " Set default encoding to UTF-8
"set autowrite                   " Automatically save before :next, :make etc.
"set autoread                    " Automatically reread changed files without asking me anything
"set laststatus=2
"set hidden
"
"set ruler                       " Show the cursor position all the time
"au FocusLost * :wa              " Set vim to save the file on focus out.
"
"set fileformats=unix,dos,mac    " Prefer Unix over Windows over OS 9 formats
"
"set noshowmatch                 " Do not show matching brackets by flickering
"set noshowmode                  " We show the mode with airlien or lightline
"set incsearch                   " Shows the match while typing
"set hlsearch                    " Highlight found searches
"set ignorecase                  " Search case insensitive...
"set smartcase                   " ... but not when search pattern contains upper case characters
"set ttyfast
"" set ttyscroll=3               " noop on linux ?
"set lazyredraw                  " Wait to redraw "
"
"" speed up syntax highlighting
"set nocursorcolumn
"set nocursorline
"
"syntax sync minlines=256
"set synmaxcol=300
"set re=1
"
"
"set background=dark
"set nocompatible                " vim defaults, not vi!
"set autoread                    " watch for file changes by other programs
"set visualbell                  " visual beep
"set scrolloff=5                 " keep at least 5 lines above/below cursor
"set ruler                       " show the line number on bar
"
"set modelines=1
"
"" Better copy & paste
"" When you want to paste large blocks of code into vim, press F2 before you
"" paste. At the bottom you should see ``-- INSERT (paste) --``.
"
"set pastetoggle=<F2>
"set clipboard=unnamed
"map <silent> <F2> :set invnumber<cr>
":nnoremap <silent> <F7> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>
"
"" https://coderwall.com/p/nckasg/map-w-to-w-in-vim
":command WQ wq
":command Wq wq
":command W w
":command Q q
"
":command NS SyntasticToggleMode
"
"" http://www.swaroopch.com/blog/bash-vim-setup/
"set scrolloff=5
"
"" Mouse and backspace
"set mouse-=a    " disable mouse support in all modes; on OSX press ALT and click
"set bs=2        " make backspace behave like normal again
"set mousehide   " hide the mouse when typing text
"
"
"" Rebind <Leader> key
"" I like to have it here becuase it is easier to reach than the default and
"" it is next to ``m`` and ``n`` which I use for navigating between tabs.
""" let mapleader = ","
"
"
"" Bind nohl
"" Removes highlight of your last search
"" ``<C>`` stands for ``CTRL`` and therefore ``<C-n>`` stands for ``CTRL+n``
"noremap <C-n> :nohl<CR>
"vnoremap <C-n> :nohl<CR>
"inoremap <C-n> :nohl<CR>
"
"
"" Quicksave command
""" noremap <C-Z> :update<CR>
""" vnoremap <C-Z> <C-C>:update<CR>
""" inoremap <C-Z> <C-O>:update<CR>
"
"
"" Quick quit command
""" noremap <Leader>e :quit<CR>  " Quit current window
""" noremap <Leader>E :qa!<CR>   " Quit all windows
"
"
"" bind Ctrl+<movement> keys to move around the windows, instead of using Ctrl+w + <movement>
"" Every unnecessary keystroke that can be saved is good for your health :)
""" map <c-j> <c-w>j
""" map <c-k> <c-w>k
""" map <c-l> <c-w>l
""" map <c-h> <c-w>h
"
"
"" easier moving between tabs
""" map <Leader>n <esc>:tabprevious<CR>
""" map <Leader>m <esc>:tabnext<CR>
"
"
"" map sort function to a key
"vnoremap <Leader>s :sort<CR>
"
"
"" easier moving of code blocks
"" Try to go into visual mode (v), thenselect several lines of code here and
"" then press ``>`` several times.
"vnoremap < <gv  " better indentation
"vnoremap > >gv  " better indentation
"
"
"" Only do this part when compiled with support for autocommands.
"if has("autocmd")
"
"  " Enable file type detection.
"  " Use the default filetype settings, so that mail gets 'tw' set to 72,
"  " 'cindent' is on in C files, etc.
"  " Also load indent files, to automatically do language-dependent indenting.
"  filetype plugin indent on
"
"  " Put these in an autocmd group, so that we can delete them easily.
"  augroup vimrcEx
"    au!
"
"    " For all text files set 'textwidth' to 78 characters.
"    autocmd FileType text setlocal textwidth=78
"
"    " When editing a file, always jump to the last known cursor position.
"    " Don't do it when the position is invalid or when inside an event handler
"    " (happens when dropping a file on gvim).
"    " Also don't do it when the mark is in the first line, that is the default
"    " position when opening a file.
"    autocmd BufReadPost *
"          \ if line("'\"") > 1 && line("'\"") <= line("$") |
"          \ exe "normal! g`\"" |
"          \ endif
"
"  augroup END
"  " Show whitespace
"  " MUST be inserted BEFORE the colorscheme command
"  autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
"  au InsertLeave * match ExtraWhitespace /\s\+$/
"
"else
"endif " has("autocmd")
"
"
"" Color scheme
"" mkdir -p ~/.vim/colors && cd ~/.vim/colors
"" wget -O wombat256mod.vim http://www.vim.org/scripts/download_script.php?src_id=13400
"set t_Co=256
"color wombat256mod
""color solarized
"
"
"" Enable syntax highlighting
"" You need to reload this file for the change to apply
"filetype off
"filetype plugin indent on
"syntax on
"
"" Showing line numbers and length
"set number  " show line numbers
"set tw=79   " width of document (used by gd)
"set wrap
"set fo-=t   " don't automatically wrap text when typing
"set formatoptions=qrn1
"
"if exists('+colorcolumn')
"  set colorcolumn=80
"else
"  au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
"endif
"highlight ColorColumn ctermbg=233
""let &colorcolumn=join(range(81,999),",")
"highlight OverLength ctermbg=darkred ctermfg=white guibg=#FFD9D9
"match OverLength /\%>80v.\+/
"
"
"" easier formatting of paragraphs
""" vmap Q gq
""" nmap Q gqap
"
"
"" Useful settings
"set history=666
"set undolevels=666
"
"
"" Real programmers don't use TABs but spaces
"set tabstop=4
"set softtabstop=4
"set shiftwidth=4
"set shiftround
"set expandtab
"
"
"" Make search case insensitive
"set hlsearch
"set incsearch
"set ignorecase
"set smartcase
"
"" Time out on key codes but not mappings.
"" Basically this makes terminal Vim work sanely.
"set notimeout
"set ttimeout
"set ttimeoutlen=10
"
"
"
"" Disable stupid backup and swap files - they trigger too many events
"" for file system watchers
""set nobackup
""set nowritebackup
""set noswapfile
"
"
"" Setup Pathogen to manage your plugins
"" mkdir -p ~/.vim/autoload ~/.vim/bundle
"" curl -so ~/.vim/autoload/pathogen.vim https://raw.github.com/tpope/vim-pathogen/HEAD/autoload/pathogen.vim
"" Now you can install any plugin into a .vim/bundle/plugin-name/ folder
"execute pathogen#infect()
"call pathogen#helptags()
"
"
"
"
"" ----------------------------------------- "
"" File Type settings              "
"" ----------------------------------------- "
"
"au BufNewFile,BufRead *.vim setlocal noet ts=4 sw=4 sts=4
"au BufNewFile,BufRead *.txt setlocal noet ts=4 sw=4
"au BufNewFile,BufRead *.md setlocal noet ts=4 sw=4
"au BufNewFile,BufRead *.yml,*.yaml setlocal expandtab ts=2 sw=2
"au BufNewFile,BufRead *.cpp setlocal expandtab ts=2 sw=2
"au BufNewFile,BufRead *.hpp setlocal expandtab ts=2 sw=2
"au BufNewFile,BufRead *.json setlocal expandtab ts=2 sw=2
"
"augroup filetypedetect
"  au BufNewFile,BufRead .tmux.conf*,tmux.conf* setf tmux
"  au BufNewFile,BufRead .nginx.conf*,nginx.conf* setf nginx
"augroup END
"
"au FileType nginx setlocal noet ts=4 sw=4 sts=4
"
"" Go settings
"au BufNewFile,BufRead *.go setlocal noet ts=4 sw=4 sts=4
"
"" scala settings
"autocmd BufNewFile,BufReadPost *.scala setl shiftwidth=2 expandtab
"
"" Markdown Settings
"autocmd BufNewFile,BufReadPost *.md setl ts=4 sw=4 sts=4 expandtab
"
"" lua settings
"autocmd BufNewFile,BufRead *.lua setlocal noet ts=4 sw=4 sts=4
"
"" Dockerfile settings
"autocmd FileType dockerfile set noexpandtab
"
"" shell/config/systemd settings
"autocmd FileType fstab,systemd set noexpandtab
"autocmd FileType gitconfig,sh,toml set noexpandtab
"
"" python indent
"autocmd BufNewFile,BufRead *.py setlocal tabstop=4 softtabstop=4 shiftwidth=4 textwidth=80 smarttab expandtab
"
"" toml settings
"au BufRead,BufNewFile MAINTAINERS set ft=toml
"
"" Wildmenu completion {{{
"set wildmenu
"" set wildmode=list:longest
"set wildmode=list:full
"
"set wildignore+=.hg,.git,.svn                    " Version control
"set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
"set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
"set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
"set wildignore+=*.spl                            " compiled spelling word lists
"set wildignore+=*.sw?                            " Vim swap files
"set wildignore+=*.DS_Store                       " OSX bullshit
"set wildignore+=*.luac                           " Lua byte code
"set wildignore+=migrations                       " Django migrations
"set wildignore+=go/pkg                       " Go static files
"set wildignore+=go/bin                       " Go bin files
"set wildignore+=go/bin-vagrant               " Go bin-vagrant files
"set wildignore+=*.pyc                            " Python byte code
"set wildignore+=*.orig                           " Merge resolution files
"
"
"
"
"" ============================================================================
"" Python IDE Setup
"" ============================================================================
"
"" Settings for vim-powerline
"" cd ~/.vim/bundle
"" git clone git://github.com/Lokaltog/vim-powerline.git
"set laststatus=2
"
"
"" Settings for ctrlp
"" cd ~/.vim/bundle
"" git clone https://github.com/kien/ctrlp.vim.git
"let g:ctrlp_max_height = 30
"set wildignore+=*.pyc
"set wildignore+=*_build/*
"set wildignore+=*/coverage/*
"
"
"" Settings for jedi-vim
"" pip install jedi
"" cd ~/.vim/bundle
"" git clone git://github.com/davidhalter/jedi-vim.git
""let g:jedi#usages_command = "<leader>z"
""let g:jedi#popup_on_dot = 0
""let g:jedi#popup_select_first = 0
""map <Leader>b Oimport ipdb; ipdb.set_trace() # BREAKPOINT<C-c>
"
"" Better navigating through omnicomplete option list
"" See http://stackoverflow.com/questions/2170023/how-to-map-keys-for-popup-menu-in-vim
"set complete=.,w,b,u,t
"set completeopt=longest,menuone
"function! OmniPopup(action)
"    if pumvisible()
"        if a:action == 'j'
"            return "\<C-N>"
"        elseif a:action == 'k'
"            return "\<C-P>"
"        endif
"    endif
"    return a:action
"endfunction
"
"inoremap <silent><C-j> <C-R>=OmniPopup('j')<CR>
"inoremap <silent><C-k> <C-R>=OmniPopup('k')<CR>
"
"
"" Python folding
"" mkdir -p ~/.vim/ftplugin
"" wget -O ~/.vim/ftplugin/python_editing.vim http://www.vim.org/scripts/download_script.php?src_id=5492
"set nofoldenable
"
"
"" YAML stuff
"au BufNewFile,BufRead *.yaml,*.yml setf yaml
"
"" indentLine
"let g:indentLine_color_term = 239
"
"" Every time you forget to sudo before opening a file and you do not have the
"" rights to save it, you just :w!!, write the superuser password and the file
"" gets saved.
"cmap w!! w !sudo tee % >/dev/null
"
"
"" If you need to move line (or a block of selected lines) all you have to do is to add the following lines to you .vimrc:
"" https://coderwall.com/p/hphtgg/vim-moving-lines-ain-t-hard
"" Normal mode
"nnoremap <C-j> :m .+1<CR>==
"nnoremap <C-k> :m .-2<CR>==
"" Insert mode
"inoremap <C-j> <ESC>:m .+1<CR>==gi
"inoremap <C-k> <ESC>:m .-2<CR>==gi
"" Visual mode
"vnoremap <C-j> :m '>+1<CR>gv=gv
"vnoremap <C-k> :m '<-2<CR>gv=gv
"
"
"" keep at the end to overrule stuff in plugins
"" set conceallevel=0              " Do not hide syntax characters (e.g. Markdown.)
"let g:indentLine_conceallevel = 0 " see .vim/bundle/indentLine/README.md
