#!/bin/bash

#set -o xtrace
set -o nounset
set -o errexit
set -o pipefail

DEBUG="echo"
NODEBUG="${1:-''}"
if [ "${NODEBUG}" = "DO" ]
then
	DEBUG=''
	shift
fi

ACTION="${1:-}"
[ -n "${ACTION}" ] && shift


function printf2() {
	local field1
	local field2
	local field1w=${3:-50}
	local field2w

	field1="$(echo "${1:-''}" | tr '\n' ' ')"
	field2="$(echo "${2:-''}" | tr '\n' ' ')"
	field2w="$(($(tput cols)-field1w))"
	[ "${field2w}" -lt 0 ] && field2w=0

	printf "%-${field1w}.${field1w}s%-${field2w}.${field2w}s\n" "${field1}" "${field2}"
}

function druplistd() {
	local list

	local basedir=${1}

	if list="$(drup -q list "${basedir}" | grep '\[D\]' | cut -d\  -f4-)"
	then echo "${list}" | sed -e 's/^[[:blank:]]*//' -e 's/[[:blank:]]*$//'
	else echo ""
	fi
}

function druplist() {
	local list

	local basedir=${1}

	if list="$(drup -q list "${basedir}" | cut -d\  -f4-)"
	then echo "${list}" | sed -e 's/^[[:blank:]]*//' -e 's/[[:blank:]]*$//'
	else echo ""
	fi
}

function search_dir() {
	local list

	local searchdir=${1}

	if list="$(drup -q search "${searchdir}" | grep '\[D\]' | cut -d\  -f4-)"
	then echo "${list}" | sed -e 's/^[[:blank:]]*//' -e 's/[[:blank:]]*$//'
	else echo ""
	fi

}

function search_file() {
	local list

	local searchfile=${1}

	if list="$(drup -q search "${searchfile}" | grep '\[F\]' cut -d\  -f4-)"
	then echo "${list}" | sed -e 's/^[[:blank:]]*//' -e 's/[[:blank:]]*$//'
	else echo ""
	fi

}

function delete_dir() {
	local dir="${1}"
	${DEBUG} drup delete "${dir}"
}

function recurse_find_delete_dirs() {
	local currentdir
	local deletedir
	local listfiles
	local listdirs
	local subdir

	currentdir="${1}"
	deletedir="${2}"
	listfiles="$(druplist "${currentdir}")"
	listdirs="$(druplistd "${currentdir}")"
	printf2 "${currentdir} " " --> ${listfiles}" 100

	if [ -z "${listfiles}" ]
	then	# delete empty dirs
		delete_dir "${currentdir}"
	else	# look for deletedir and delete it
		OIFS=$IFS
		IFS=$(echo -en "\n\b")
		for subdir in ${listdirs}
		do
			if [ "${subdir}" = "${deletedir}" ]
			then
				echo
				delete_dir "${currentdir}/${subdir}"
				echo
			else
				delete_dirs "${currentdir}/${subdir}"
			fi
		done
		IFS=$OIFS
	fi
}

function recurse_find_delete_empty_dirs() {
	local currentdir
	local listfiles
	local listdirs
	local subdir

	currentdir="${1}"
	listfiles="$(druplist "${currentdir}")"
	listdirs="$(druplistd "${currentdir}")"
	printf2 "${currentdir} " " --> ${listfiles}" 100

	if [ -z "${listfiles}" ]
	then	# delete empty dirs
		delete_dir "${currentdir}"
	else	# continu searching in subdirs
	OIFS=$IFS
	IFS=$(echo -en "\n\b")
		for subdir in ${listdirs}
		do
			 recurse_find_delete_empty_dirs "${currentdir}/${subdir}"
		done
	fi
	IFS=$OIFS
}

function search_delete_dirs() {
	local deletedir
	local listdirs
	local dir

	deletedir="${1:-'Aib9aquai4eehahLa3aequahjei4ohAib9aquai4eehahLa3aequahjei4oh'}" # fail safe default that probably will not exist...

	listdirs="$(search_dir "${deletedir}")"

	OIFS=$IFS
	IFS=$(echo -en "\n\b")
	for dir in ${listdirs}
	do
		delete_dir "${dir}"
	done
	IFS=$OIFS
}

function main() {
	case $ACTION in
		recurse_find_delete_dirs)
			basedir="${1:-//}"; basedir="${basedir%/}"
			deletedir="${2:-@eaDir}"
			recurse_find_delete_dirs "${basedir}" "${deletedir}"
			;;

		search_delete_dirs)
			deletedir="${1:-@eaDir}"
			search_delete_dirs "${deletedir}"
			;;

		recurse_find_delete_empty_dirs)
			basedir="${1:-//}"; basedir="${basedir%/}"
			recurse_find_delete_empty_dirs "${basedir}"
			;;
		*)
			echo "Not a valid action: ${ACTION}"
			exit 1
	esac
}

#main $*

deletedir="@eaDir"
basedir="${ACTION:-//}"; basedir="${basedir%/}"
search_delete_dirs "${deletedir}"
recurse_find_delete_empty_dirs "${basedir}"

