#!/bin/bash

set -o nounset
set -o errexit
set -o pipefail

## Parameters

#tmp=/tmp/background-file-list.setbg
setbg_delay=1800

# load some defaults
source "$HOME/etc/defaults"

p1="${1:-}"
p2="${2:-}"


## Functions

error() {
    echo "$*" >&2
    exit 1
}

checkcli() {
    # check cli parameters
    if [ -z "$p1" ]     # zero parameters
    then
        action='default'
        target="${defaultbg}"
    elif [ ! -z "$p2" ] # two parameters
    then
        action="$p1"
        target="$p2"
    else                # only one parameter
        case "$p1" in
            ## keep this in sync with options in main loop
            lock|redisplay|default)
                action="$p1"
                if [ ! -z "$p2" ] # two parameters
                then
                    target="${p2}"
                else
                    target="${defaultbg}"
                fi
                ;;
            *)
                action='default'
                target="$p1"
                ;;
        esac
    fi
}

checktarget() {
    ## check target
    deeptarget=$(find $HOME/${pictures} -maxdepth 3 -name $(basename ${target}) -type d 2>/dev/null | grep ${target} 2>/dev/null || : | sort | head -n 1 )

    if [ -r "${deeptarget}" ]
        then target="${deeptarget}"
    elif [ -r "${target}" ]
        then :
    elif [ -r "$HOME/${target}" ]
        then target="$HOME/${target}"
    elif [ -r "$HOME/${pictures}/${target}" ]
        then target="$HOME/${pictures}/${target}"
    else
        error "Cannot find a target \"${target}\""
    fi
}

pickpic() {
    # get picture according to target
    # target is set to a file/dir we can read
    if [ -d "${target}" ]
    then # if directory, the pick a random picture
        pictures="${target}"

        # disable shell expansion for the iregex
        set -o noglob
        # Pick random picture
        background="`find -L ${pictures} -type f -iregex .*.jpg -o -iregex .*.png | sort -R | head -n 1`"
        # reenable shell expansion
        set +o noglob

    else # a file, should be a picture
        background="${target}"
    fi
    background=`readlink -e "${background}"`
}

definebg() {
    # set as default background
    ln -nfs "${background}" "${defaultbg}"
}

displaybg() {
    # set the background
    feh --no-fehbg --bg-fill ${defaultbg}
}

createlockpic() {
	RES=()
	RESSORT=$(while read LINE
			do
			    if [[ "$LINE" =~ ([0-9]+)x([0-9]+)\+([0-9]+)\+([0-9]+) ]]
				then
			        W=${BASH_REMATCH[1]}
			        H=${BASH_REMATCH[2]}
					w=${BASH_REMATCH[3]}
					echo $w $W $H
			    fi
			done <<<"$(xrandr)")

	while read LINE
	do
	    if [[ "$LINE" =~ ([0-9]+)\ ([0-9]+)\ ([0-9]+) ]]
		then
	        W=${BASH_REMATCH[2]}
			H=${BASH_REMATCH[3]}
			RES+=("${W}x${H}")
		fi
	done <<<"$(echo "${RESSORT}")"

	n=0
	for res in "${RES[@]}"
	do
		# https://unix.stackexchange.com/questions/146773/why-bash-increment-n-0n-return-error
		(( n++ )) || :
		# create a picture fill-resized to each display for the lockscreen
		convert "${background}" -resize ${res}^ \
			                    -gravity center \
				                -extent ${res} \
					            "${lockscreen_image}-${n}"
	done
	montage ${lockscreen_image}-* -tile ${n}x1 -geometry +0+0 "${lockscreen_image}"
	rm -f ${lockscreen_image}-*
}

trap_loop() {
    loop
}

loop() {
    while true
    do
        # press ctrl-c to change wallpaper, or twice to exit
        trap SIGINT
        sleep 0.5
        setbg
        trap trap_loop SIGINT
        sleep ${setbg_delay}
    done
}

showpath() {
    # show which picture is used
    #echo -e "`date +%Y%m%d.%H%M%S`\t`readlink --canonicalize ${background}`"
	echo "$(readlink --canonicalize ${background})"
}

setbg() {
    checktarget
    pickpic
    definebg
    displaybg
    showpath
}

lock() {
    checktarget
    pickpic
    createlockpic
    showpath
}

main() {
    # what parameters did we get?
    checkcli
    case ${action} in
        ## keep this in sync with options in checkcli
        'lock')
            lock
            ;;
        'redisplay') # just redisplay bg, adjusts new screen sizes
            displaybg
            ;;
        'default')  # default action, pick and set a background
            setbg
            ;;
        'loop')
            loop
            ;;
        *)
            error "Unknown action \"${action}\""
            ;;
    esac
}

cd ~
main

