#!/bin/bash

set -o nounset
set -o errexit
set -o pipefail

## Parameters
# load some defaults
source "$HOME/etc/defaults"
setbg_delay=${setbg_delay:-1800}
p1="${1:-}"
p2="${2:-}"


## Functions

error() {
	s=${1:-}; shift
	cli_notify critical $s $* >&2 || :
    exit 1
}

checktarget() {

	# verify the kind of target we have
	local _target
	_target=${1:-}
    if [ ! -r "${_target}" -o ! -f "${_target}" ]
	then
		if [ -r "$HOME/${_target}" ]
		then
				target="$HOME/${_target}"
		elif [ -r "${pictures}/${_target}" ]
		then
				target="${pictures}/${_target}"
		else
			deeptarget=$(find ${pictures} -maxdepth 3 \
				-name $(basename ${_target}) -type d 2>/dev/null \
				| grep ${_target} 2>/dev/null || : | sort | head -n 1 )
			if [ -r "${deeptarget}" ]
				then target="${deeptarget}"
			else
				error "Cannot find target ${_target}"
			fi
		fi
	else
		target=${_target}
	fi
}

pickpic() {
	## pick a picture
    # get picture according to target
    # target is set to a file/dir we can read
    if [ -d "${target}" ]
    then # if directory, the pick a random picture
        pictures="${target}"
        # disable shell expansion for the iregex
        set -o noglob
		# disable pipefail - when head quits, find doesn't like loosing its reader
		set +o pipefail
        # Pick random picture
        background="`find -L ${pictures} -type f -iregex .*.jpg -o -iregex .*.png | sort -R | head -n 1`"
        # reenable options
        set +o noglob

    else # a file, should be a picture
        background="${target}"
    fi
    background=`readlink -e "${background}"`
}

definebg() {
    # set as default background
    ln -nfs "${background}" "${bglnk}"
}

displaybg() {
    # set the background
    feh --no-fehbg --bg-fill ${bglnk}
}

trap_loop() {
	echo
    trap - SIGINT # clear the trap so we can really stop the loop here
    sleep 0.5
}

loop() {
    while true
    do
		echo -n "$(date +%H:%M) "
        setbg ${target}
        # press ctrl-c to change wallpaper, or twice to exit
		set +o errexit # errexit overrides trap
        trap trap_loop SIGINT
        sleep ${setbg_delay}
    done
}

showpath() {
    # show which picture is used
	file="$(readlink --canonicalize ${bglnk})"
	filename=$(basename "${file}")
	dirname=$(dirname "${file}")
	cli_notify low "${filename}" "${dirname}"
	echo "${dirname}/${filename}"
}

setbg() {
    checktarget $1
	pickpic
    definebg
    displaybg
    showpath
}

lock() {
    checktarget $1
	pickpic
    cp "${background}" "${lockscreen_image}"
}

main() {
    # what parameters did we get?
	local action
    if [ -z "$p1" ]				## ZERO PARAMETERS
    then						# default action, pick and set a background
        target="${defaultbg}"
        setbg ${target}
    elif [ -z "$p2" ]			## ONE PARAMETER
    then						#	action without argument, or
		case ${p1} in			#	just a target
			'redisplay'|'show') # just redisplay bg, adjusts new screen sizes
				showpath
				displaybg
				;;
			'lock'|"loop")		# these need a parameter
				error "setbg" "The action '${p1}' needs a parameter"
				;;
			*)					# must be a target
				target="${p1}"
				setbg "${target}"
				;;
		esac
	else						## TWO PARAMERS
        action="${p1}"			#   action with
        target="${p2}"			#   parameter
		case ${action} in
			'lock')				# generate a lock screen with given target
				lock ${target}
				;;
			'loop')
				loop
				;;
			*)
				error "Unknown action" "${action}"
				;;
			esac
    fi
}

cd ~
main

