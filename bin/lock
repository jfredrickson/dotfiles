#!/bin/bash

# # i3lock on commputer sleep
#   Source: https://bbs.archlinux.org/viewtopic.php?pid=1170536#p1170536 by 65kid
#   Also: https://wiki.debian.org/ScreenLockingOnSleep
#
## /etc/systemd/system/i3lock.service

# [Unit]
# Description=i3lock
# Before=sleep.target
#
# [Service]
# User=serge
# Type=notify
# NotifyAccess=all
# Environment=DISPLAY=:0.0
# ExecStart=/home/serge/bin/lock
# PIDFile=/var/run/user/1000/i3lock/pid
#
# [Install]
# WantedBy=sleep.target
#

DEBUG=""
#DEBUG=1
if [ -n "${DEBUG}" ]
then
	set -x
fi

set -o nounset
set -o errexit
set -o pipefail

# log this scripts full output
# exec >> ~/.lock.log 2>&1

# load some defaults
source "$HOME/etc/defaults"

i3lock_icons="$HOME/Pictures/icons/i3lock"
i3lock_icon="${i3lock_icons}/token.png"
lockscreen="${1:-$default_lockscreen}"

MYUID="$(id -u "${USER}")"
PIDPATH=/var/run/user/${MYUID:-1000}/i3lock
PIDFILE=${PIDPATH}/pid
install -g serge -o serge -m 700 -d "${PIDPATH}"


##############################
## subroutines              ##
##############################

function prepare() {
	if [ ! "$lockscreen" = "keep" ] && [ ! "$lockscreen" = "blurred" ]
	then
		# we requested an Picture Background: update lockscreen with a background
		setbg lock "$lockscreen"
	elif [ "$lockscreen" = "blurred" ]
	then
		make_blurred
	fi
	annotate_lockscreen ${lockscreen_image}
	PLAYERCTLSTATUS="$(playerctl status ||:)"
	ponymix is-muted && MUTED=yes || MUTED=no || :
}

function make_blurred() {
	# take a screenshot and blur it for the lock screen
	BLUR="-blur 0x5"
	/usr/bin/maim --format=png --hidecursor --quality 7 --quiet "$screenshot_image"
	convert "$screenshot_image" ${BLUR} "$lockscreen_image"
}

function annotate_lockscreen() {
	TEXT=""

	local image
	image="${1:-$lockscreen}"
	ICON="${i3lock_icon}"
	# for some reason "convert -list font" returns 1
	FONT="$( (convert -list font ||:) | awk "{ a[NR] = \$2 } /family: $(fc-match sans -f "%{family}\n")/ { print a[NR-1]; exit }")"

	LOCK=()
	while read LINE
	do
		if [[ "$LINE" =~ ([0-9]+)x([0-9]+)\+([0-9]+)\+([0-9]+) ]]; then
			W=${BASH_REMATCH[1]}
			H=${BASH_REMATCH[2]}
			Xoff=${BASH_REMATCH[3]}
			Yoff=${BASH_REMATCH[4]}
			MIDXi=$((W / 2 + Xoff - 60  / 2))
			MIDYi=$((H / 2 + Yoff - 60  / 2))
			MIDXt=$((W / 2 + Xoff - 285 / 2))
			MIDYt=$((H / 2 + Yoff + 320 / 2))
			LOCK+=(-font $FONT -pointsize 26 -fill lightgrey -stroke grey10 \
				   -strokewidth 2 -annotate +$MIDXt+$MIDYt "$TEXT" \
				   -fill lightgrey -stroke lightgrey -strokewidth 1 -annotate +$MIDXt+$MIDYt "$TEXT" \
				   $ICON -geometry +$MIDXi+$MIDYi -composite)
		fi
	done <<<"$(xrandr)"
	convert "$image" "${LOCK[@]}" "$image"
}

function pre_lock() {
	# make sure music stops
	if [ "${PLAYERCTLSTATUS}" = "Playing" ]
	then
		playerctl stop || :
	fi
	if [ "${MUTED}" = "no" ]
	then
		ponymix mute >/dev/null || :
	fi

	# make sure presentation mode is off
	presentation-mode stop

	# pause notifications (sleep because seems too soon after pres mode stop)
	(sleep 1; killall -v -SIGUSR1 dunst) & # pause

	# lock remote irssi screen
	irc lock || :
}

function perform_lock() {
	# start the real lock command in the background, set the PID file,
	# then wait for the lock to end (when unlocked)
	if [ -z "${DEBUG}" ]
	then
        i3lock --show-failed-attempts --tiling --nofork --ignore-empty-password --image ~/.lockscreen.png &
	else
		sleep 30 &
	fi
	# see etc/root/etc/systemd/system/i3lock.service where PIDFile is defined
	local PID=$!
	setpid $PID
	# give i3lock a bit of time to display the image
	sleep 1
	# see etc/root/etc/systemd/system/i3lock.service where this service has type 'notify'
	systemd-notify --ready --status="Locked with image $lockscreen"
	wait
}

function post_lock() {

	# unlock remote irssi screen
	irc unlock || :

    # re-enable notifications when unlock happens
    killall -v -SIGUSR2 dunst

	# re-renable music if it was playing
	if [ "${PLAYERCTLSTATUS}" = "Playing" ]
	then
		playerctl play || :
		ponymix unmute >/dev/null || :
	fi
	if [ "${MUTED}" = "no" ]
	then
		ponymix unmute >/dev/null || :
	fi

	delpid
}

function setpid() {
	PID=${1:-$$}
	echo $PID >"${PIDFILE}"
	echo lock started with pid $PID
}

function delpid() {
	rm -fv "${PIDFILE}"
}

function main() {
	# prepare lock screen image
	prepare

	# prepare system before locking
	pre_lock

    # lock screen with a lock screen image picture
	perform_lock

	# post lock to be run after screen is unlocked
	post_lock
	}

main

