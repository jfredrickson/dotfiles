#!/bin/bash

# log this scripts full output
exec >> ~/.lock.log 2>&1

echo -n "START "; date

# load some defaults
. etc/defaults

# check parameters
if  [ "$1" = suspend ]
then
    sleep="yes"
    lockscreen="${2:-$default_lockscreen}"
elif [ "$2" = suspend ]
then
    sleep="yes"
    lockscreen="${1:-$default_lockscreen}"
else
    sleep=""
    lockscreen="${1:-$default_lockscreen}"
fi

# initiate a delayed sleep - should effectively happen after the screen gets
# locked
initiate_suspend() {
    # this function should be started in the background
    # wait a bit to make sure it's locked
    sleep 1
    # suspend
    sudo /usr/sbin/pm-suspend
}

##############################
## now we start doing things #
##############################

# prepare lockscreen image
if [ ! "$lockscreen" = "keep" -a ! "$lockscreen" = "blurred" ]
then
    # update background lockscreen
    setbg lock "$lockscreen"
elif [ "$lockscreen" = "blurred" ]
then
    # take a screenshot and blur it for the lock screen
    scrot --delay 0 "$screenshot_image" \
        --exec "convert "$screenshot_image" -blur 0x3 "$lockscreen_image
fi

# make sure music stops
mediaplayer_cmd stop

# pause notifications
killall -v -SIGUSR1 dunst # pause

# first lock remote irssi screen
irc lock &

# initiate suspend if told so
if  [ "$sleep" = yes ]
then
    initiate_suspend &
fi

# then lock screen with a background picture
# --nofork makes sure i3lock doesn't return until it gets unlocked
i3lock --show-failed-attempts --tiling --nofork --ignore-empty-password --image ~/.lockscreen.png

# then re-enable notifications when unlock happens
killall -v -SIGUSR2 dunst

echo -n "STOP "; date
echo
