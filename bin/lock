#!/bin/bash

# log this scripts full output
# exec >> ~/.lock.log 2>&1

# load some defaults
cd ~serge
. etc/defaults

lockscreen="${1:-$default_lockscreen}"
MYUID=$(id -u $USERNAME)
PIDPATH=/var/run/user/$MYUID/i3lock
mkdir -p $PIDPATH

perform_lock() {
    # lock screen with a background picture
    # --nofork makes sure i3lock doesn't return until it gets unlocked
    i3lock --show-failed-attempts --tiling --nofork --ignore-empty-password --image ~/.lockscreen.png
    # then re-enable notifications when unlock happens
    killall -v -SIGUSR2 dunst
}

##############################
## now we start doing things #
##############################

# prepare lockscreen image
if [ ! "$lockscreen" = "keep" -a ! "$lockscreen" = "blurred" ]
then
    # update background lockscreen
    bin/setbg lock "$lockscreen"
elif [ "$lockscreen" = "blurred" ]
then
    # take a screenshot and blur it for the lock screen
    scrot --delay 0 "$screenshot_image" \
        --exec "convert "$screenshot_image" -blur 0x3 "$lockscreen_image
fi

# make sure music stops
playerctl stop

# make sure presentation mode is off
bin/presentation-mode stop

# pause notifications (sleep because seems too soon after pres mode stop)
(sleep 1; killall -v -SIGUSR1 dunst) & # pause

# first lock remote irssi screen
bin/irc lock &

# then perform the lock and exit this script
# see etc/root/etc/systemd/system/i3lock.service where this lock is called
# 'forking'
perform_lock &
PID=$!
echo $PID >$PIDPATH/pid
echo i3lock started with pid $PID

mkdir -p $PIDPATH

# add in a bit to make sure the screen is locked before we handover to systemd
# suspend
sleep 1

