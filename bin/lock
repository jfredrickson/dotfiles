#!/bin/bash
# c-basic-offset: 4; tab-width: 4; indent-tabs-mode: t
# vi: set shiftwidth=4 tabstop=4 noexpandtab:
# :indentSize=4:tabSize=4:noTabs=false:


# # i3lock on commputer sleep
#   Source: https://bbs.archlinux.org/viewtopic.php?pid=1170536#p1170536 by 65kid
#   Also: https://wiki.debian.org/ScreenLockingOnSleep
#

DEBUG=${DEBUG:-0}
#DEBUG=1
#DEBUG=2
LOCKSLEEP=5
TIMEFORMAT='%3R'

set -o nounset
set -o errexit
set -o pipefail

# load some defaults
source "$HOME/etc/defaults"
ANNOTATETEXT="${lockscreen_annotatetext:-}"

# log this scripts full output
logfile="${lockscreen_image%.*}.log"
if [ $DEBUG -eq 0 ]
then
	exec &> >(tee "${logfile}")
fi

if [ $DEBUG -gt 1 ]
then
	set -x
fi

i3lock_icons="$HOME/Pictures/icons/i3lock"
i3lock_icon="${i3lock_icons}/token.png"
lockscreen="${1:-$default_lockscreen}"

# SYSTEMDSERVICE is set to yes in the systemd service unit file
SYSTEMDSERVICE=${SYSTEMDSERVICE:-no}
MYUID="$(id -u "${USER}")"
PIDPATH=/var/run/user/${MYUID:-1000}/i3lock
PIDFILE=${PIDPATH}/pid
install -g serge -o serge -m 700 -d "${PIDPATH}"


##############################
## subroutines              ##
##############################

function notify() {
	TS="$(date +%Y.%m.%d-%H:%M)"
	echo "$(date +%Y.%m.%d-%H:%M:%S) $* (${SECONDS}s)"
}

function _time2() {
	time $*
}
function _time() {
	all="$*"
	info=$1
	[ $DEBUG -gt 1 ] && set +x
	duration="$(_time2 ${all} 2>&1)"
	[ $DEBUG -gt 1 ] && set -x
	notify "Execution of $info took $duration"
}

function systemdservice() {
	if [ "${SYSTEMDSERVICE}" = yes ]
	then
		return 0
	else
		return 1
	fi
}

function prepare() {
	if ! systemdservice
	then # these checks don't work when ran via systemd (needs dbus)
		notify "Check music players and sound volume."
		PLAYERCTLSTATUS="$(playerctl status ||:)"
		i3-volume is-muted && MUTED=yes || MUTED=no || :
	else
		PLAYERCTLSTATUS="unknown"
		MUTED="unknown"
	fi

	notify "Pick the right lockscreen image.(${SECONDS}s)"
	if [ ! "$lockscreen" = "keep" ] && [ ! "$lockscreen" = "blurred" ]
	then
		notify "Choosing a picture background."
		setbg lock "$lockscreen"
	elif [ "$lockscreen" = "blurred" ]
	then
		make_blurred
	else
		notify "Keeping the current lockscreen."
		return
	fi

	annotate_lockscreen ${lockscreen_image}
}

function make_blurred() {
	# take a screenshot and blur it for the lock screen
	notify "Take a screenshot and blur it."
	BLUR="-blur 0x5"
	_time maim --format=png --hidecursor --quality 7 --quiet "$screenshot_image"
	_time convert "$screenshot_image" ${BLUR} "$lockscreen_image"
}

function annotate_lockscreen() {
	[ -z "${ANNOTATETEXT}" ] && return
	TEXT="${ANNOTATETEXT}"
	notify "Annotate lockscreen with lock symbol and optional text."

	local image
	image="${1:-$lockscreen}"
	ICON="${i3lock_icon}"
	# for some reason "convert -list font" returns 1
	FONT="$( (convert -list font ||:) | awk "{ a[NR] = \$2 } /family: $(fc-match sans -f "%{family}\n")/ { print a[NR-1]; exit }")"

	LOCK=()
	while read LINE
	do
		if [[ "$LINE" =~ ([0-9]+)x([0-9]+)\+([0-9]+)\+([0-9]+) ]]; then
			W=${BASH_REMATCH[1]}
			H=${BASH_REMATCH[2]}
			Xoff=${BASH_REMATCH[3]}
			Yoff=${BASH_REMATCH[4]}
			MIDXi=$((W / 2 + Xoff - 60  / 2))
			MIDYi=$((H / 2 + Yoff - 60  / 2))
			MIDXt=$((W / 2 + Xoff - 285 / 2))
			MIDYt=$((H / 2 + Yoff + 320 / 2))
			LOCK+=(-font $FONT -pointsize 26 -fill lightgrey -stroke grey10 \
				   -strokewidth 2 -annotate +$MIDXt+$MIDYt "$TEXT" \
				   -fill lightgrey -stroke lightgrey -strokewidth 1 -annotate +$MIDXt+$MIDYt "$TEXT" \
				   $ICON -geometry +$MIDXi+$MIDYi -composite)
		fi
	done <<<"$(xrandr)"
	_time convert "$image" "${LOCK[@]}" "$image"
}

function pre_lock() {
	if ! systemdservice
	then
		if [ "${MUTED}" = "no" ]
		then
			notify "Mute sound."
			i3-volume mute >/dev/null || notify "Could not mute the sound." >&2
		fi
		if [ "${PLAYERCTLSTATUS}" = "Playing" ]
		then
			notify "Stop any music player."
			playerctl stop || notify "Could not stop the music player." >&2
		fi
	fi

	notify "Disable presentation mode."
	presentation-mode stop

    # sleep because seems too soon after pres mode stop
	(
		sleep 1
		notify "Pause notifications."
		notify "$(killall -v -SIGUSR1 dunst 2>&1)"
	 ) &

	notify "Lock remote irssi screen."
	irc lock ||:
}

function perform_lock() {
	# start the real lock command in the background, set the PID file,
	# then wait for the lock to end (when unlocked)
	if [ ${DEBUG} -eq 0 ]
	then
		notify "Running i3lock."
        _time i3lock --show-failed-attempts --tiling --nofork --ignore-empty-password --image ~/.lockscreen.png &
	else
		notify "Now is when we would run i3lock, sleeping for ${LOCKSLEEP}s."
		_time sleep ${LOCKSLEEP} &
	fi

	# get and set i3lock pid
	local PID=$!
	setpid $PID

	# give i3lock a bit of time to display the image
	sleep 1

	## /etc/systemd/system/i3lock.service
	#
	# [Unit]
	# Description=i3lock
	# Before=sleep.target
	#
	# [Service]
	# User=serge
	# Type=notify
	# NotifyAccess=all
	# Environment=DISPLAY=:0.0
	# ExecStart=/home/serge/bin/lock
	# PIDFile=/var/run/user/1000/i3lock/pid
	# Environment=SYSTEMDSERVICE=yes
	#
	# [Install]
	# WantedBy=sleep.target
	#
	systemd-notify --ready --status="Screen locked with image $lockscreen" &>/dev/null && \
		notify "Notifying systemd the lock is done." || :

	wait
}

function post_lock() {

	notify "Unlock remote irssi screen."
	(irc unlock ||:) &  # too many issues with ssh timeouts

    notify "Re-enable notifications."
	notify "$(killall -v -SIGUSR2 dunst 2>&1)"

	if ! systemdservice
	then
		# re-renable music if it was playing
		if [ "${PLAYERCTLSTATUS}" = "Playing" ]
		then
			notify "Restart music player."
			playerctl play || notify "Could not start the music player." >&2
		fi
		if [ "${MUTED}" = "no" ]
		then
			notify "Unmute the sounds again."
			i3-volume unmute >/dev/null || notify "Could not unmute the sound." >&2
		fi
	fi

	delpid
}

function setpid() {
	PID=${1:-$$}
	echo $PID >"${PIDFILE}"
	notify "Lock process started with pid $PID, set in ${PIDFILE}."
}

function delpid() {
	notify "Removing PID file ${PIDFILE}."
	rm -f "${PIDFILE}"
}

function main() {
	# prepare lock screen image
	prepare

	# prepare system before locking
	pre_lock

    # lock screen with a lock screen image picture
	perform_lock

	# post lock to be run after screen is unlocked
	post_lock
	}

notify Lock service started
main

